1. Wzorzec projektowy
   Wzorzec projektowy przedstawia typowe rozwiązanie problemów często napotkanych przy tworzeniu oprogramowania.
   Stanowi coś na kształt gotowego planu, który można dostosować, aby rozwiązać powtarzający się problem w kodzie.
   Wzorzec nie jest konkretnym fragmentem kodu, który można skopiować i rozwiązać nim dany problem, ale ogólną koncepcją
   pozwalającą rozwiązać dany problem.

   Wzorce często myli się z algorytmami, ponieważ obie koncepcje opisują typowe rozwiązanie jakiegoś znanego problemu.
   Algorytm jednak zawsze definiuje wyraźny zestaw czynności które prowadzą do celu, zaś wzorzec to wysokopoziomowy opis rozwiązania.
   Kod powstały na podstawie jednego wzorca może wyglądać zupełnie inaczej w różnych programach.

2. SOLID
    Single Resposibility Principle
    Zasada mówi o tym, że klasa powinna mieć wyłącznie jeden powód do zmiany.
    Wytyczna ta sprowadza się do tego, że dana klasa powinna mieć jeden główny cel.
    Jedną główną odpowiedzialność. Jedną funkcjonalność, którą realizuje.
    Twoje klasy powinny mieć motto: rób jedną rzecz, rób tę rzecz dobrze.

    Open/Closed Principle
    Kod, który tworzymy chcemy aby był “możliwy do rozszerzania i zamknięty na modyfikacje”.
    Sprowadza się do do świadomego użycia kompozycji, dziedziczenia czy modyfikatorów dostępu.

    Liskov Substitution Principle
    W przypadku tej wytycznej Twój kod powinien współpracować poprawnie z klasą, jak i wszystkimi jej podklasami.
    Innymi słowy jeśli zależysz od jakiegoś interfejsu to wszystkie jego implementacje powinny poprawnie działać z Twoją klasą/metodą.
    Stosowanie się do tej zasady pozwala na dostarczenie alternatywnej implementacji danej funkcjonalności bez zmiany Twojego kodu.

    Interface Segregation Principle.
    Wytyczna ta mówi o tym, abyś rozdzielał interfejs klasy. Interfejs ten powinien być odpowiednio zdefiniowany.
    Chodzi tu o aby inny fragment kodu, który używa Twojej klasy używał wyłącznie podzbioru metod, który jest w tamtym przypadku istotny.
    W oryginale wytyczna ta mówi o tym, ze klienty nie powinny być zmuszane do wprowadzania zależności od interfejsów, których nie używają.
    Jeśli będziesz stosował się do tej wytycznej to zmiany Twoich klas powinny być łatwiejsze do przeprowadzenia.
    Dzięki jasno zdefiniowanym interfejsom ryzyko zmiany klas, które używają tych interfejsów będzie mniejsze.

    Dependency Inversion Principle
    Wytyczna ta mówi, że wysokopoziomowe klasy nie powinny zależeć od niskopoziomowych detali.
    Zależność ta powinna być odwrócona poprzez wprowadzenie dodatkowych elementów.
    Mówi się tu o dodatkowych warstwach abstrakcji, które pozwalają na zmianę kierunku takiej zależności.

3. Dziedziczenie
   Jest to mechanizm, który pozwala na rozszerzanie funkcjonalności obiektów poprzez hierarchiczne powiązanie ich ze sobą tzn.
   jeden obiekt dziedziczy zachowania i stan od drugiego.

// Klasa Animal wraz z różnymi metodami

   public class Animal {
       public void eat() {
           System.out.println(this.getClass().getSimpleName() + " eat");
       }

       public void walk() {
           System.out.println(this.getClass().getSimpleName() + " walk");
       }

       public void sleep() {
           System.out.println(this.getClass().getSimpleName() + " sleep");
       }
   }

// Dziedziczenie po klasie Animal

   public class Dog extends Animal {
   }

   public class Cat extends Animal {
   }

//Korzystanie z metod klasy animal na obiektach typu Cat i Dog

public class Main {
    public static void main(String[] args) {
        Animal animal = new Animal();
        animal.eat();
        animal.walk();
        animal.sleep();
        Animal dog = new Dog();
        dog.eat();
        dog.walk();
        dog.sleep();
        Animal cat = new Cat();
        cat.eat();
        cat.walk();
        cat.sleep();
    }
}

4. Polimorfizm
   Polimorfizm czyli inaczej wielopostaciowość. Klasy pochodne mogą dziedziczyć zachowania i stan klas nadrzędnych, ale także mogą zmieniać
   te zachowania i stan. Weźmy pod uwagę na przykład stos (rozumiany jako lista obsługiwana zgodnie ze strategią pierwszy na wejściu – ostatni
   na wyjściu (ang. last-in, first-out — LIFO). Możesz napisać program, który będzie wymagał użycia trzech typów stosu.
   Jeden będzie przechowywał wartości całkowite, drugi wartości zmiennoprzecinkowe, a ostatni znaki.
   We wszystkich tych przypadkach algorytm implementujący stos będzie taki sam, mimo że poszczególne stosy przechowują różne dane.
   W języku programowania strukturalnego musiałbyś jednak utworzyć trzy różne zestawy operacji na stosie różniące się nazwami i
   parametrami funkcji. W języku Java dzięki polimorfizmowi wystarczy utworzyć jeden ogólny zestaw operacji na stosie,
   które będą działać we wszystkich trzech przypadkach. Zatem jeśli potrafisz posługiwać się w Javie jednym stosem,
   to możesz korzystać z najróżniejszych typów stosów.

5. Hermetyzacja
   Hermetyzacja polega na decydowaniu jak pole i metody danego obiektu mają być widoczne dla innych obiektów. Chodzi o stworzenie
   pewnego rodzaju czarnej skrzynki, do której możemy przekazywać dane oraz otrzymywać użyteczne wyjście, natomiast kod wewnętrzny
   nie może podlegać próbom ingerencji z zewnątrz. Różne stopnie hermetyzacji otrzymujemy dzięki modyfikatorom dostępu: public, protected,
   private oraz no modifier.

   Public - ogólny dostęp

   Protected - umożliwia dostęp do pól i metod dla klasy, klasy dziedziczącej oraz innym klasom w tym samym pakiecie.
   Modyfikator protected moze byc stosowany do pola, metod, konstruktora, ale nie moze byc stosowany do oznaczenia klasy

   private - umożliwia dostęp do pól i metod tylko dla klasy, nie będą one widoczne w tym samym pakiecie ani klasie dziedziczącej

   brak modyfikatora - pola i metody są widoczne tylko w klasie i pakiecie. Działa jak private, ale umożliwia operowanie w obszarze pakietu

   https://www.javatpoint.com/access-modifiers

   Używając hermetyzacje uodparniamy naszą klasę na błędy. Wystarczy ukryć pola klasy i wystawić metody, które będą zwracały kopię pól i
   dzięki temu nasza klasa będzie niezmienna.

6. String pool
   String pool jest specjalnym miejscem w pamięci, do którego trafiają niektóre obiekty typu Stringi – dokładnie te, które nie
   są tworzone poprzez użycie operatora new. String pool został stworzony w celu optymalizacji JVM, dzięki niemu wiele obiektów
   Stringów o tej samej wartości wskazują na ten sam obszar pamięci. String pool zapewnia mniejsze zużycie pamięci – String jest
   zazwyczaj najszczęściej używanym typem w Javie. Dodatkowo przyśpiesza to porównywanie Stringów – jest duże prawdopodobieństwo,
   że kilka obiektów wskazuje na ten sam obszar pamięci. Skoro mają tą samą referencję to dalsze porównywanie jest zbędne.

   public class Main {
     public static void main(String[] args) {
       String pablo1 = "pablo";
       String pablo2 = "pablo";
       String pablo3 = new String(pablo1);
       String pablo4 = new String(pablo2);
       System.out.println(pablo1 == pablo2);
       System.out.println(pablo3 == pablo4);
       System.out.println(pablo1.equals(pablo3));
       System.out.println(pablo3.equals(pablo4));
     }
   }

   Efekt działania:
   true
   false
   true
   true

7. Dependency injection
   Jest to wzorzec projektowy/mechanizm, w którym obiekt nie tworzy obiektów, które wykorzystywane są wewnątrz.
   Dzięki temu, nie wiążemy się z konkretną implementacją, a także nie musimy znać parametrów konstruowanego obiektu.
   Operując na interfejsach stajemy się niezależni od konkretnej implementacji, a nasz kod zaczyna realizować Open/Closed principle.
   Zależności mogą być dostarczane (wstrzykiwane) na wiele sposobów. Na przykład poprzez wywołanie “seterów” czy dostarczenie
   niezbędnych parametrów konstruktora. Bez wstrzykiwania wszystkie zależności tworzone są przez obiekt, który ich wymaga.
   Prowadzi to do kodu, który jest trudny do testowania i mocno związany z konkretną implementacją zależności.

8. Wyciek pamięci
   Wyciek pamięci następuje wtedy, kiedy dane obiekty nie są już używane przez aplikację, ale garbage collector nie jest
   w stanie ich usunąć, ponieważ w naszej aplikacji nadal są przechowywane do nich referencje. W rezultacie zużywane jest
   coraz więcej zasobów znacząco spowalniając naszą aplikację, aż do momentu, kiedy ich braknie i rzucony zostanie OutOfMemoryError.

9. Garbage Collector
   Garbage Collector to aplikacja, która nieustannie dba o pamięć naszej aplikacji. Gdyby nie GC, pamięć naszego programu
   zapełniłaby się bardzo szybko – uniemożliwiałoby to dalszą pracę programu. Garbage Collector stale monitoruje obiekty
   naszej aplikacji, kiedy oznaczy je jako już nie potrzebne – zabiera się za czyszczenie pamięci z niepotrzebnych już
   „śmieciowych” obiektów.

   Algorytmy, które wykorzystuje Garbage Collector możemy podzielić na dwa zasadnicze typy: skalarne i wektorowe.
   Algorytm skalarny - idea algorytmów skalarnych polega na skojarzeniu z każdym obiektem licznika, który wskazuje na liczbę odwołań (referencji).
   Algorytm wektorowy - idea ich działania polega na umieszczeniu wszystkich obiektów w grafie, przejściu całego grafu i oznaczeniu obiektów,
   do których udało nam się dotrzeć. Obiekty bez referencji zostaną usunięte podczas pracy Garbage Collectora.

10.Obiekt immutable
   Obiekt niezmienny (immutable) to taki, który po utworzeniu i inicjalizacji pozostaje niezmienny i co ważne,
   nie ma możliwości jego zmiany (oczywiście w konwencjonalny sposób). Czyli taki obiekt nie udostępnia metod, które pozwalają
   na zmianę jego stanu. A jego wszystkie pola są prywatne.

   Zapewnienie niezmienności
   Poza tym, że wszystkie pola powinny być prywatne, to mogą być jeszcze final. A sama klasa powinna być oznaczona jako final tak,
   żeby nie można było po niej dziedziczyć. Taki obiekt nie powinien udostępniać metod, które pozwalają modyfikować jego wewnętrzny stan,
   np. setterów.

   Ale prywatne pola to jeszcze nie wszystko. Ważne jest, jakie typy danych przechowujemy w tych polach. One też powinny być niezmienne.
   Jeśli pola w twoim obiekcie są prymitywami, wrapperami prymitywów lub stringami to nie ma problemu. Wszystkie te typy są niezmienne.
   Ale jeśli używasz własnych obiektów, to musisz zapewnić ich niezmienność. najbardziej wygodnym sposobem do tworzenia obiektów niezmiennych
   jest skorzystanie ze wzorca builder. Żeby użycie buildera było możliwe, musi on być zaimplementowany wewnątrz danej klasy,
   tak by miał dostęp do prywatnych pól klasy.

11. Wyrażenia lambda
    lambdy pozwalają na pisanie kodu w sposób funkcyjny. Oznacza to, że zamiast operować na stanach obiektów możemy bezpośrednio deklarować,
    co chcemy zrobić. Odnosząc lambdy do programowania obiektowego, możemy o nich myśleć jak o klasach tymczasowych zawierających jedną
    metodę. Lambdy to obiekty, zawierające fragment kodu: funkcję, a także specyficzne atrybuty i parametry ważne dla nich (środowisko,
    w ramach którego operuje funkcja).

    // Tradycyjna pętla
    for (String animal : animals) {
    System.out.print(animal + "; ");
    }

    // Wyrażenie lambda
    animals.forEach((animal) -> System.out.print(animal + "; "));

12. Strumienie
    Strumień reprezentuje sekwencje elementów i pozwala na różne operacje na tych elementach. Operacje te mogą być pośrednie i takie
    możemy układać w łańcuchy metod, oraz końcowe, zwracające wynik, lub nie.

    List fruits = Arrays.asList("apple", "banana", "cherry", "plum", "pear", "pinapple");

    fruits.stream().filter(s -> s
                    .toString()
                    .startsWith("p"))
                    .map(s -> s.toString().toUpperCase())
                    .sorted()
                    .forEach(System.out::println);

    Efekt działania:
    PEAR
    PINAPPLE
    PLUM

13. Wyjątki
    Wyjątek jest specjalną klasą. Jest ona specyficzna ponieważ w swoim łańcuchu dziedziczenia ma klasę java.lang.Throwable.
    Instancje, które w swojej hierarchii dziedziczenia mają tę klasę mogą zostać „rzucone” (ang. throw) przerywając standardowe
    wykonanie programu.

    Obsługa wyjątków - Mówimy, że wyjątek jest obsługiwany, jeśli reagujemy na jego wystąpienie i próbujemy “naprawić” program
    w trakcie jego działania. Możemy też powiedzieć, że łapiemy wyjątek.  Do obsługi wyjątków służy blok try/catch.

    Każdy wyjątek w języku Java dziedziczy po klasie Throwable. Wyróżniamy dwa rodzaje wyjątków, tak zwane “checked exceptions”
    oraz “unchecked exceptions”. Różnica między nimi sprowadza się do tego, że te pierwsze muszą być obsłużone przez programistę,
    wymaga tego kompilator. Przykładowym wyjątkiem typu unchecked jest IllegalArgumentException, natomiast IOException jest wyjątkiem
    typu checked.

    Reguła podziału wyjątków na te dwa rodzaje jest prosta. Jeśli wyjątek w swojej hierarchii dziedziczenia ma Exception i nie ma
    RuntimeException jest wyjątkiem typu checked. W każdym innym przypadku jest to wyjątek typu unchecked.

    Wyjątek można obsłużyć na dwa sposoby. Drugi sprowadza się do “zepchnięcia” odpowiedzialności obsłużenia wyjątku o poziom niżej,
    do metody wywołującej. Służy do tego klauzula throws, którą dodajemy do deklaracji metody.

14. Klasa abstrakcyjna
    Klasy abstrakcyjne są to klasy, która nie mogą mieć swoich reprezentantów w postaci obiektów. Klasa abstrakcyjna jest pewnym
    uogólnieniem innych klas (na przykład dla występujących w rzeczywistości obiektów), lecz sama jako taka nie istnieje.
    W Javie klasę abstrakcyjną możemy stworzyć za pomocą słowa kluczowego abstract, które dodajemy do definicji standardowej klasy.
    Klasy abstrakcyjne służą jedynie do definiowania klas o charakterze abstrakcyjnym wykorzystywanym do dziedziczenia przez inne klasy.
    Abstrakcyjność klasy oznacza, iż nie można tworzyć jej egzemplarzy (obiektów).

15. Interfejsy to typy, które są bardzo podobne do klas, ale mogą zawierać jedynie stałe i deklaracje metod.  Interfejsy nie mogą mieć stanu.
    Służą one do definiowania zachowania dla obiektów. Ale inaczej niż w przypadku klasy abstrakcyjnej nie definiują tego zachowania
    (metody nie mają implementacji). Każda klasa implementująca interfejs musi mieć implementację metod zawartych w interfejsie.

16. Kolekcje - List, Set, Map
    Lista - Lista podobnie jak tablica, grupuje elementy. Jej główną przewagą nad tablicą jest to, że programista nie musi się
    przejmować rozmiarem listy, jest ona automatycznie powiększana wraz z dodawaniem nowych elementów.
    LinkedList lepiej jest używać jeśli często usuwasz elementy z listy, a ArrayList lepiej jest używać jeśli często chcesz mieć
    dostęp do losowych elementów w liście.

    Set - Zbiór to kolekcja, która służy do przechowywania unikalnych elementów. W przypadku zbioru nie jest istotna kolejność
    dodawanych elementów. Innymi słowy jeśli do zbioru dodamy na początku element X a później Y to przechodząc po kolei po
    elementach zbioru możemy dostać je w odwrotnej kolejności. Kolejną cechą zbioru jest to, że przechowuje on unikalne elementy.
    W odróżnieniu od listy, w zbiorze można przechowywać wyłącznie jedną instancję obiektu.

    Map - java.util interface reprezentuje mape pomiedzy kluczem i wartoscia. Klucze w mapie sa unikalne.
    Kolejnosc Mapy zalezy od jej implementacji, np. TreeMap oraz LinkedHashMap maja okreslone kolejnosci, a HashMap nie.
    Sa dwa interfejsy implementujace Map w Javie, SortedMap i Map, SortedMap rozszerza Map, oraz trzy klasy: HashMap, TreeMap, LinkedHashMap
    TreeMap implementuje Interfejs SortedMap,
    HashMap implementuje Interfejs Map,
    LinkedHashMap rozszerza Klase HashMap.
    Polecam przesledzenie diagramu na stronie: https://www.geeksforgeeks.org/map-interface-java-examples/

17. Overloading (przeladowanie) - Overloading możemy wykorzystać, gdy mamy jedną metodę, która przyjmuje zmienną
    liczbę argumentów, albo argumenty o różnych typach. Przeciążać możemy metody (także statyczne) i konstruktory.
    Overloading pojawia się, gdy w jednej klasie mamy dwie metody (lub więcej), które mają taką samą nazwę, ale różnią się parametrami.
    Na kursie pojawiła się definicja sygnatury metody.
    Przypomnijmy, że sygnatura składa się z:
        ● nazwy metody,
        ● listy parametrów wraz z zadeklarowanymi typami.
    Nie można zdefiniować w klasie dwóch metod, które mają identyczną sygnaturę - kompilator zgłosi błąd.

    Dodatkowe informacje: https://www.programiz.com/java-programming/method-overloading

18. Overriding - pojęcie to związane jest z dziedziczeniem. Mamy dwie metody - jedna jest wklasie bazowej, a druga w klasie pochodnej.
    Metoda w klasie pochodnej przesłania metodę z nadklasy. Zatem, wykorzystując overriding, mamy możliwość zdefiniowania
    specyficznego zachowania metody w klasie pochodnej. Jeśli chcemy zmienić implementację w podklasie - nad jej sygnaturą dodajemy adnotację
    @Override. Nie jest to co prawda konieczne, jednak zdecydowanie należy do dobrych praktyk oraz pozwala uniknąć wielu błędów.

    Dodatkowe informacje: https://www.geeksforgeeks.org/overriding-in-java/

19. Java "static" keyword: https://www.baeldung.com/java-static
    - pola static: Kiedy deklarowane jest pole "static" dokladnie jedna kopia tego pola jest tworzona oraz dzielona przez
    wszystkie instancje tej klasy. Nie ma znaczenia ile razy zainicjalizujemy klase, zwsze bedzie dokladnie jedna kopia pola static.
    Wartosc tego pola bedzie dzielona przez wszystkie obiekty tej samej klasy lub innej. (polecam przyklady z zalaczonego linka).


    - metody static: metody statyczne naleza tak samo jak pola statyczne do Klasy a nie do obiektu klasy, w ktorej metoda ta sie znajduje.
    Dzieki temu, mozemy wywolywac te metody bez tworzenia obiektu danej klasy, w ktorej metoda jest zadeklarowana.
    Metody statycznie moga byc przyslaniane (Overridden)
    Metody abstrakcyjne nie moda byc statyczne
    Metody statycznie nie moga uzywac wyrazen "this" lub "super"


    - Klasa static: Uzywane kiedy piszemy kod deklarujac klase w klasie:

    public class Singleton  {
        private Singleton() {}

        private static class SingletonHolder {
            public static final Singleton instance = new Singleton();
        }

        public static Singleton getInstance() {
            return SingletonHolder.instance;
        }
    }

    Klasa statyczna "SingletonHolder" utowrzona w klasie zewnetrznej "Songleton" bedzie miala dostep jedynie do statycznych
    czlonkow tej klasy, czyli metody "getInstance()".

    Powody dla ktorych uzywa sie klas statycznych:
    - grupowanie klas, ktore beda uzywane tylko w jednym miejscu podnosci enkapsulacje
    - tworzymy kod tylko w tym miejscu gdzie bedzie uzywany - wzrost czytelnosci kodu oraz ulatwienie zarzadzania lub edycji
    - Jesli klasa wewnetrzan nie wymaga dostepu do zadnych czlonkow instancji klasy zewnetrznej, lepiej oznaczyc klase jako statyczna- wzrost optymalizacji pamieci.


20. Java "final" keyword: https://www.baeldung.com/java-final

    - Final Classes: klasa oznaczona jako "final" nie moze miec klas dziedziczacych. Nie znaczy to jednak, ze instancje klasy final sa immutable, mozna je zmieniac.
    - Final Methods: Metody oznaczone jako final nie moga byc przysloniete (Overridden). Moga wykonywac konkretna akcje.
    - Final Variable: Zmienne oznaczone jako final nie moga byc zmieniane ani nie moga byc ponownie przypisywane
    - Final Reference Variable: Jesli tworzymy obiekt klasy Cat:

    final Cat cat = new Cat();
    obiekt ten nie moze zostac ponownie przypisany lecz mozliwa jest zmiana wlasciwosci tego obiektu przez settery:

    cat.setWeight(5);
    assertEquals(5, cat.getWeight()); ---> zwraca True.

    - Final Fields: Pola oznaczone jako final sa uznawane jako stale. Wszystkie pola final powinny zostac zainicjalizowane zanim wykona sie konstruktor.
    - Final Arguments: oznaczenie final mozna stosowac do argumentow jakie przyjmuja metody. Argumenty te nie moga byc zmienione wenatrz metody.

21. Java Abstract Class
    Klasa abstrakcyja moze byc rozszerzana ale nie moze zostac stwozony z niej zadna instancja.
    Aby klasa mogla byc abstrakcyjna, musi posiadac przynajmniej jedna metode abstrakcyjna.
    Poza metodadami abstrakcyjnymi moze posiadac normalne metody.
    Klasa dziedziczaca po klasie abstrakcyjnej, musi implementowac wszystkie metody abstrakcyjne klasy nadrzednej
    lub sama powinna byc abstrakcyjna jesli tego nie robi


22. Java Interface

23. Java Collections
